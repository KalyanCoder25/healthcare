pipeline {
    agent any
    
    environment {
        // Node.js version
        NODE_VERSION = '18'
        
        // Build configuration
        APP_NAME = 'healthcare-frontend'
        BUILD_PATH = 'dist'
        
        // Deployment configuration
        DEPLOY_HOST = credentials('deploy-host')
        DEPLOY_USER = credentials('deploy-user')
        DEPLOY_KEY = credentials('deploy-ssh-key')
        
        // Environment-specific API URLs
        STAGING_API_URL = 'https://staging-api.healthcare.com/api/v1'
        PRODUCTION_API_URL = 'https://api.healthcare.com/api/v1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Setup Node.js') {
            steps {
                sh "nvm use ${NODE_VERSION}"
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }
        
        stage('Lint') {
            steps {
                sh 'npm run lint'
            }
        }
        
        stage('Type Check') {
            steps {
                sh 'npm run type-check'
            }
        }
        
        stage('Test') {
            steps {
                sh 'npm run test:ci'
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'test-results.xml'
                    publishCoverageGoberturaReports(
                        coberturaReportFile: 'coverage/cobertura-coverage.xml'
                    )
                }
            }
        }
        
        stage('Build Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    writeFile file: '.env.production', text: """
VITE_API_URL=${STAGING_API_URL}
VITE_APP_ENV=staging
VITE_APP_VERSION=${BUILD_NUMBER}
"""
                }
                sh 'npm run build'
                archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
            }
        }
        
        stage('Build Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    writeFile file: '.env.production', text: """
VITE_API_URL=${PRODUCTION_API_URL}
VITE_APP_ENV=production
VITE_APP_VERSION=${BUILD_NUMBER}
"""
                }
                sh 'npm run build'
                archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
            }
        }
        
        stage('Security Scan') {
            steps {
                sh 'npm audit --audit-level moderate'
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    deployToEnvironment('staging')
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    input message: 'Deploy to production?', ok: 'Deploy'
                    deployToEnvironment('production')
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    def environment = env.BRANCH_NAME == 'main' ? 'production' : 'staging'
                    healthCheckFrontend(environment)
                }
            }
        }
    }
    
    post {
        always {
            // Clean up
            sh 'rm -rf dist node_modules'
        }
        
        success {
            slackSend(
                channel: '#deployments',
                color: 'good',
                message: "✅ Healthcare Frontend deployed successfully!\nBranch: ${env.BRANCH_NAME}\nBuild: ${env.BUILD_NUMBER}\nCommit: ${env.GIT_COMMIT_SHORT}"
            )
        }
        
        failure {
            slackSend(
                channel: '#deployments',
                color: 'danger',
                message: "❌ Healthcare Frontend deployment failed!\nBranch: ${env.BRANCH_NAME}\nBuild: ${env.BUILD_NUMBER}\nCommit: ${env.GIT_COMMIT_SHORT}"
            )
        }
    }
}

def deployToEnvironment(environment) {
    def deployPath = environment == 'production' ? 
        '/var/www/healthcare.com' : 
        '/var/www/staging.healthcare.com'
    
    sshagent([env.DEPLOY_KEY]) {
        sh """
            # Create deployment package
            tar -czf frontend-${BUILD_NUMBER}.tar.gz -C dist .
            
            # Upload and deploy
            scp -o StrictHostKeyChecking=no frontend-${BUILD_NUMBER}.tar.gz ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/
            
            ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} '
                # Backup current deployment
                if [ -d ${deployPath} ]; then
                    sudo cp -r ${deployPath} ${deployPath}.backup.${BUILD_NUMBER}
                fi
                
                # Create deployment directory
                sudo mkdir -p ${deployPath}
                
                # Extract new deployment
                cd ${deployPath}
                sudo tar -xzf /tmp/frontend-${BUILD_NUMBER}.tar.gz
                
                # Set permissions
                sudo chown -R www-data:www-data ${deployPath}
                sudo chmod -R 755 ${deployPath}
                
                # Reload nginx
                sudo nginx -t && sudo systemctl reload nginx
                
                # Clean up
                rm /tmp/frontend-${BUILD_NUMBER}.tar.gz
            '
        """
    }
}

def healthCheckFrontend(environment) {
    def healthUrl = environment == 'production' ? 
        'https://healthcare.com' : 
        'https://staging.healthcare.com'
    
    retry(3) {
        sleep(5)
        sh "curl -f -s -o /dev/null ${healthUrl}"
    }
}